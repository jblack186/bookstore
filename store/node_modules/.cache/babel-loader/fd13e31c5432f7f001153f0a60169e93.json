{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveValue = toHaveValue;\n\nvar _jestMatcherUtils = require(\"jest-matcher-utils\");\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveValue, this);\n\n  if (htmlElement.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(htmlElement.type)) {\n    throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead');\n  }\n\n  const receivedValue = (0, _utils.getSingleElementValue)(htmlElement);\n  const expectsValue = expectedValue !== undefined;\n  return {\n    pass: expectsValue ? (0, _isEqualWith.default)(receivedValue, expectedValue, _utils.compareArraysAsSet) : Boolean(receivedValue),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = (0, _jestMatcherUtils.matcherHint)(`${this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);\n      return (0, _utils.getMessage)(matcher, `Expected the element ${to} have value`, expectsValue ? expectedValue : '(any)', 'Received', receivedValue);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jamie/Documents/bookstore/store/node_modules/@testing-library/jest-dom/dist/to-have-value.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","toHaveValue","_jestMatcherUtils","_isEqualWith","_utils","htmlElement","expectedValue","checkHtmlElement","tagName","toLowerCase","includes","type","Error","receivedValue","getSingleElementValue","expectsValue","undefined","pass","default","compareArraysAsSet","Boolean","message","to","isNot","matcher","matcherHint","getMessage"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;;AAEA,IAAIC,iBAAiB,GAAGN,OAAO,CAAC,oBAAD,CAA/B;;AAEA,IAAIO,YAAY,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAzC;;AAEA,IAAIQ,MAAM,GAAGR,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASK,WAAT,CAAqBI,WAArB,EAAkCC,aAAlC,EAAiD;AAC/C,GAAC,GAAGF,MAAM,CAACG,gBAAX,EAA6BF,WAA7B,EAA0CJ,WAA1C,EAAuD,IAAvD;;AAEA,MAAII,WAAW,CAACG,OAAZ,CAAoBC,WAApB,OAAsC,OAAtC,IAAiD,CAAC,UAAD,EAAa,OAAb,EAAsBC,QAAtB,CAA+BL,WAAW,CAACM,IAA3C,CAArD,EAAuG;AACrG,UAAM,IAAIC,KAAJ,CAAU,gJAAV,CAAN;AACD;;AAED,QAAMC,aAAa,GAAG,CAAC,GAAGT,MAAM,CAACU,qBAAX,EAAkCT,WAAlC,CAAtB;AACA,QAAMU,YAAY,GAAGT,aAAa,KAAKU,SAAvC;AACA,SAAO;AACLC,IAAAA,IAAI,EAAEF,YAAY,GAAG,CAAC,GAAGZ,YAAY,CAACe,OAAjB,EAA0BL,aAA1B,EAAyCP,aAAzC,EAAwDF,MAAM,CAACe,kBAA/D,CAAH,GAAwFC,OAAO,CAACP,aAAD,CAD5G;AAELQ,IAAAA,OAAO,EAAE,MAAM;AACb,YAAMC,EAAE,GAAG,KAAKC,KAAL,GAAa,QAAb,GAAwB,IAAnC;AACA,YAAMC,OAAO,GAAG,CAAC,GAAGtB,iBAAiB,CAACuB,WAAtB,EAAoC,GAAE,KAAKF,KAAL,GAAa,MAAb,GAAsB,EAAG,cAA/D,EAA8E,SAA9E,EAAyFjB,aAAzF,CAAhB;AACA,aAAO,CAAC,GAAGF,MAAM,CAACsB,UAAX,EAAuBF,OAAvB,EAAiC,wBAAuBF,EAAG,aAA3D,EAAyEP,YAAY,GAAGT,aAAH,GAAmB,OAAxG,EAAiH,UAAjH,EAA6HO,aAA7H,CAAP;AACD;AANI,GAAP;AAQD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveValue = toHaveValue;\n\nvar _jestMatcherUtils = require(\"jest-matcher-utils\");\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveValue, this);\n\n  if (htmlElement.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(htmlElement.type)) {\n    throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead');\n  }\n\n  const receivedValue = (0, _utils.getSingleElementValue)(htmlElement);\n  const expectsValue = expectedValue !== undefined;\n  return {\n    pass: expectsValue ? (0, _isEqualWith.default)(receivedValue, expectedValue, _utils.compareArraysAsSet) : Boolean(receivedValue),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = (0, _jestMatcherUtils.matcherHint)(`${this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);\n      return (0, _utils.getMessage)(matcher, `Expected the element ${to} have value`, expectsValue ? expectedValue : '(any)', 'Received', receivedValue);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}