{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DiffOptions', {\n  enumerable: true,\n  get: function get() {\n    return _jestDiff.DiffOptions;\n  }\n});\nexports.matcherHint = exports.matcherErrorMessage = exports.getLabelPrinter = exports.pluralize = exports.diff = exports.printDiffOrStringify = exports.ensureExpectedIsNonNegativeInteger = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.DIM_COLOR = exports.BOLD_WEIGHT = exports.INVERTED_COLOR = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireWildcard(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst _prettyFormat$plugins = _prettyFormat.default.plugins,\n      AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,\n      DOMCollection = _prettyFormat$plugins.DOMCollection,\n      DOMElement = _prettyFormat$plugins.DOMElement,\n      Immutable = _prettyFormat$plugins.Immutable,\n      ReactElement = _prettyFormat$plugins.ReactElement,\n      ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;\nconst PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen'];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim('Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.');\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = (object, maxDepth = 10) => {\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.default)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch (e) {\n    result = (0, _prettyFormat.default)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text => text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text => text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object => RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value => EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (name, value, print // printExpected or printReceived\n) => {\n  const type = (0, _jestGetType.default)(value);\n  const hasType = type !== 'null' && type !== 'undefined' ? `${name} has type:  ${type}\\n` : '';\n  const hasValue = `${name} has value: ${print(value)}`;\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n    'this matcher must not have an expected argument', printWithType('Expected', expected, printExpected)));\n  }\n};\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${RECEIVED_COLOR('received')} value must be a number`, printWithType('Received', actual, printReceived)));\n  }\n};\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${EXPECTED_COLOR('expected')} value must be a number`, printWithType('Expected', expected, printExpected)));\n  }\n};\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' || !Number.isSafeInteger(expected) || expected < 0) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${EXPECTED_COLOR('expected')} value must be a non-negative integer`, printWithType('Expected', expected, printExpected)));\n  }\n};\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.default)(expected);\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if ((0, _jestGetType.isPrimitive)(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    return typeof expected === 'string' && typeof received === 'string' && expected.length !== 0 && received.length !== 0 && (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received));\n  }\n\n  if (expectedType === 'date' || expectedType === 'function' || expectedType === 'regexp') {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (expectedType === 'object' && typeof expected.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst printDiffOrStringify = (expected, received, expectedLabel, receivedLabel, expand) => {\n  if (typeof expected === 'string' && typeof received === 'string') {\n    const result = (0, _jestDiff.getStringDiff)(expected, received, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (result !== null) {\n      if (result.isMultiline) {\n        return result.annotatedDiff;\n      }\n\n      const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n      const expectedLine = printLabel(expectedLabel) + printExpected(result.a);\n      const receivedLine = printLabel(receivedLabel) + printReceived(result.b);\n      return expectedLine + '\\n' + receivedLine;\n    }\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const difference = (0, _jestDiff.default)(expected, received, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (typeof difference === 'string' && difference.includes('- ' + expectedLabel) && difference.includes('+ ' + receivedLabel)) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine = printLabel(receivedLabel) + (stringify(expected) === stringify(received) ? 'serializes to the same string' : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nconst diff = (a, b, options) => shouldPrintDiff(a, b) ? (0, _jestDiff.default)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) => (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = (...strings) => {\n  const maxLength = strings.reduce((max, string) => string.length > max ? string.length : max, 0);\n  return string => `${string}: ${' '.repeat(maxLength - string.length)}`;\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (hint, generic, specific // incorrect value returned from call to printWithType\n) => `${hint}\\n\\n${_chalk.default.bold('Matcher error')}: ${generic}\\n\\n${specific}`; // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = (matcherName, received = 'received', expected = 'expected', options = {}) => {\n  const _options$comment = options.comment,\n        comment = _options$comment === void 0 ? '' : _options$comment,\n        _options$expectedColo = options.expectedColor,\n        expectedColor = _options$expectedColo === void 0 ? EXPECTED_COLOR : _options$expectedColo,\n        _options$isDirectExpe = options.isDirectExpectCall,\n        isDirectExpectCall = _options$isDirectExpe === void 0 ? false : _options$isDirectExpe,\n        _options$isNot = options.isNot,\n        isNot = _options$isNot === void 0 ? false : _options$isNot,\n        _options$promise = options.promise,\n        promise = _options$promise === void 0 ? '' : _options$promise,\n        _options$receivedColo = options.receivedColor,\n        receivedColor = _options$receivedColo === void 0 ? RECEIVED_COLOR : _options$receivedColo,\n        _options$secondArgume = options.secondArgument,\n        secondArgument = _options$secondArgume === void 0 ? '' : _options$secondArgume,\n        _options$secondArgume2 = options.secondArgumentColor,\n        secondArgumentColor = _options$secondArgume2 === void 0 ? EXPECTED_COLOR : _options$secondArgume2;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;","map":{"version":3,"sources":["/Users/jamie/Documents/bookstore/store/node_modules/jest-matcher-utils/build/index.js"],"names":["Object","defineProperty","exports","value","enumerable","get","_jestDiff","DiffOptions","matcherHint","matcherErrorMessage","getLabelPrinter","pluralize","diff","printDiffOrStringify","ensureExpectedIsNonNegativeInteger","ensureNumbers","ensureExpectedIsNumber","ensureActualIsNumber","ensureNoExpected","printWithType","printExpected","printReceived","highlightTrailingWhitespace","stringify","SUGGEST_TO_CONTAIN_EQUAL","DIM_COLOR","BOLD_WEIGHT","INVERTED_COLOR","RECEIVED_COLOR","EXPECTED_COLOR","_chalk","_interopRequireDefault","require","_interopRequireWildcard","_jestGetType","_prettyFormat","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","set","default","_prettyFormat$plugins","plugins","AsymmetricMatcher","DOMCollection","DOMElement","Immutable","ReactElement","ReactTestComponent","PLUGINS","green","red","inverse","bold","dim","MULTILINE_REGEXP","SPACE_SYMBOL","NUMBERS","object","maxDepth","MAX_LENGTH","result","min","e","callToJSON","length","Math","floor","text","replace","replaceTrailingSpaces","spaces","repeat","name","print","type","hasType","hasValue","expected","matcherName","options","matcherString","Error","undefined","actual","Number","isSafeInteger","isLineDiffable","received","expectedType","receivedType","isPrimitive","test","asymmetricMatch","expectedLabel","receivedLabel","expand","getStringDiff","aAnnotation","bAnnotation","isMultiline","annotatedDiff","printLabel","expectedLine","a","receivedLine","b","difference","includes","shouldPrintDiff","word","count","strings","maxLength","reduce","max","string","hint","generic","specific","_options$comment","comment","_options$expectedColo","expectedColor","_options$isDirectExpe","isDirectExpectCall","_options$isNot","isNot","_options$promise","promise","_options$receivedColo","receivedColor","_options$secondArgume","secondArgument","_options$secondArgume2","secondArgumentColor","dimString"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DiffOptions', {\n  enumerable: true,\n  get: function get() {\n    return _jestDiff.DiffOptions;\n  }\n});\nexports.matcherHint = exports.matcherErrorMessage = exports.getLabelPrinter = exports.pluralize = exports.diff = exports.printDiffOrStringify = exports.ensureExpectedIsNonNegativeInteger = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.DIM_COLOR = exports.BOLD_WEIGHT = exports.INVERTED_COLOR = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireWildcard(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc =\n            Object.defineProperty && Object.getOwnPropertyDescriptor\n              ? Object.getOwnPropertyDescriptor(obj, key)\n              : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst _prettyFormat$plugins = _prettyFormat.default.plugins,\n  AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,\n  DOMCollection = _prettyFormat$plugins.DOMCollection,\n  DOMElement = _prettyFormat$plugins.DOMElement,\n  Immutable = _prettyFormat$plugins.Immutable,\n  ReactElement = _prettyFormat$plugins.ReactElement,\n  ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;\nconst PLUGINS = [\n  ReactTestComponent,\n  ReactElement,\n  DOMElement,\n  DOMCollection,\n  Immutable,\n  AsymmetricMatcher\n];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = [\n  'zero',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen'\n];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim(\n  'Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.'\n);\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = (object, maxDepth = 10) => {\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.default)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch (e) {\n    result = (0, _prettyFormat.default)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1\n    ? stringify(object, Math.floor(maxDepth / 2))\n    : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text =>\n  text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text =>\n  text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object =>\n  RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value =>\n  EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (\n  name,\n  value,\n  print // printExpected or printReceived\n) => {\n  const type = (0, _jestGetType.default)(value);\n  const hasType =\n    type !== 'null' && type !== 'undefined'\n      ? `${name} has type:  ${type}\\n`\n      : '';\n  const hasValue = `${name} has value: ${print(value)}`;\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n        'this matcher must not have an expected argument',\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${RECEIVED_COLOR('received')} value must be a number`,\n        printWithType('Received', actual, printReceived)\n      )\n    );\n  }\n};\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${EXPECTED_COLOR('expected')} value must be a number`,\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (\n    typeof expected !== 'number' ||\n    !Number.isSafeInteger(expected) ||\n    expected < 0\n  ) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${EXPECTED_COLOR('expected')} value must be a non-negative integer`,\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.default)(expected);\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if ((0, _jestGetType.isPrimitive)(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    return (\n      typeof expected === 'string' &&\n      typeof received === 'string' &&\n      expected.length !== 0 &&\n      received.length !== 0 &&\n      (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received))\n    );\n  }\n\n  if (\n    expectedType === 'date' ||\n    expectedType === 'function' ||\n    expectedType === 'regexp'\n  ) {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (\n    expectedType === 'object' &&\n    typeof expected.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  if (\n    receivedType === 'object' &&\n    typeof received.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst printDiffOrStringify = (\n  expected,\n  received,\n  expectedLabel,\n  receivedLabel,\n  expand\n) => {\n  if (typeof expected === 'string' && typeof received === 'string') {\n    const result = (0, _jestDiff.getStringDiff)(expected, received, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (result !== null) {\n      if (result.isMultiline) {\n        return result.annotatedDiff;\n      }\n\n      const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n      const expectedLine = printLabel(expectedLabel) + printExpected(result.a);\n      const receivedLine = printLabel(receivedLabel) + printReceived(result.b);\n      return expectedLine + '\\n' + receivedLine;\n    }\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const difference = (0, _jestDiff.default)(expected, received, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (\n      typeof difference === 'string' &&\n      difference.includes('- ' + expectedLabel) &&\n      difference.includes('+ ' + receivedLabel)\n    ) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine =\n    printLabel(receivedLabel) +\n    (stringify(expected) === stringify(received)\n      ? 'serializes to the same string'\n      : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nconst diff = (a, b, options) =>\n  shouldPrintDiff(a, b) ? (0, _jestDiff.default)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) =>\n  (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = (...strings) => {\n  const maxLength = strings.reduce(\n    (max, string) => (string.length > max ? string.length : max),\n    0\n  );\n  return string => `${string}: ${' '.repeat(maxLength - string.length)}`;\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (\n  hint,\n  generic,\n  specific // incorrect value returned from call to printWithType\n) =>\n  `${hint}\\n\\n${_chalk.default.bold(\n    'Matcher error'\n  )}: ${generic}\\n\\n${specific}`; // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = (\n  matcherName,\n  received = 'received',\n  expected = 'expected',\n  options = {}\n) => {\n  const _options$comment = options.comment,\n    comment = _options$comment === void 0 ? '' : _options$comment,\n    _options$expectedColo = options.expectedColor,\n    expectedColor =\n      _options$expectedColo === void 0 ? EXPECTED_COLOR : _options$expectedColo,\n    _options$isDirectExpe = options.isDirectExpectCall,\n    isDirectExpectCall =\n      _options$isDirectExpe === void 0 ? false : _options$isDirectExpe,\n    _options$isNot = options.isNot,\n    isNot = _options$isNot === void 0 ? false : _options$isNot,\n    _options$promise = options.promise,\n    promise = _options$promise === void 0 ? '' : _options$promise,\n    _options$receivedColo = options.receivedColor,\n    receivedColor =\n      _options$receivedColo === void 0 ? RECEIVED_COLOR : _options$receivedColo,\n    _options$secondArgume = options.secondArgument,\n    secondArgument =\n      _options$secondArgume === void 0 ? '' : _options$secondArgume,\n    _options$secondArgume2 = options.secondArgumentColor,\n    secondArgumentColor =\n      _options$secondArgume2 === void 0\n        ? EXPECTED_COLOR\n        : _options$secondArgume2;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;\n"]},"metadata":{},"sourceType":"script"}